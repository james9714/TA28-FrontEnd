{"ast":null,"code":"// request.js\nimport axios from'axios';// 创建 axios 实例\n// let baseUrl = 'https://ta28.azurewebsites.net'\n// if(process.env.NODE_ENV === 'production'){\n//   baseUrl = 'localhost:5000'\n// }else if(process.env.NODE_ENV === 'development'){\n//   baseUrl = 'localhost:5000'\n// }\nvar service=axios.create({baseURL:\"\",headers:{get:{'Content-Type':'application/x-www-form-urlencoded;charset=utf-8'},post:{'Content-Type':'application/json;charset=utf-8'}},// 是否跨站点访问控制请求\nwithCredentials:false,timeout:30000,//请求数据转换\ntransformRequest:[function(data){return JSON.stringify(data);}],//相应数据转换\ntransformResponse:[function(data){if(typeof data==='string'&&data.startsWith('{')){data=JSON.parse(data);}return data;}]});// 请求拦截器\nservice.interceptors.request.use(function(config){// 让每个请求携带自定义 token\n// config.headers['Authorization'] = 'token'\nreturn config;},function(error){// 错误抛到业务代码\nerror.data={};error.data.msg='服务器异常，请联系管理员！';return Promise.resolve(error);});// 响应拦截器\nservice.interceptors.response.use(function(response){var status=response.status;var msg='';if(status<200||status>=300){// 处理http错误，抛到业务代码\nmsg=showStatus(status);if(typeof response.data==='string'){response.data={msg:msg};}else{response.data.msg=msg;}//拦截异常（通知）\nNotification({title:'提示',message:msg,type:'error'});}return response;},function(error){// 错误抛到业务代码\nerror.data={};error.data.msg='请求超时或服务器异常，请检查网络或联系管理员！';return Promise.resolve(error);});var showStatus=function showStatus(status){var message='';switch(status){case 400:message='请求错误(400)';break;case 401:message='未授权，请重新登录(401)';break;case 403:message='拒绝访问(403)';break;case 404:message='请求出错(404)';break;case 408:message='请求超时(408)';break;case 500:message='服务器错误(500)';break;case 501:message='服务未实现(501)';break;case 502:message='网络错误(502)';break;case 503:message='服务不可用(503)';break;case 504:message='网络超时(504)';break;case 505:message='HTTP版本不受支持(505)';break;default:message=\"\\u8FDE\\u63A5\\u51FA\\u9519(\".concat(status,\")!\");}return\"\".concat(message,\"\\uFF0C\\u8BF7\\u68C0\\u67E5\\u7F51\\u7EDC\\u6216\\u8054\\u7CFB\\u7BA1\\u7406\\u5458\\uFF01\");};export{service as axios};","map":{"version":3,"sources":["/Users/kyle/Desktop/FrontEnd/src/utils/axios.js"],"names":["axios","service","create","baseURL","headers","get","post","withCredentials","timeout","transformRequest","data","JSON","stringify","transformResponse","startsWith","parse","interceptors","request","use","config","error","msg","Promise","resolve","response","status","showStatus","Notification","title","message","type"],"mappings":"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","sourcesContent":["// request.js\r\nimport axios from 'axios'\r\n\r\n// 创建 axios 实例\r\n// let baseUrl = 'https://ta28.azurewebsites.net'\r\n// if(process.env.NODE_ENV === 'production'){\r\n//   baseUrl = 'localhost:5000'\r\n// }else if(process.env.NODE_ENV === 'development'){\r\n//   baseUrl = 'localhost:5000'\r\n// }\r\nconst service = axios.create({\r\n  baseURL: \"\",\r\n  headers: {\r\n    get: {\r\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n    },\r\n    post: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    }\r\n  },\r\n  // 是否跨站点访问控制请求\r\n  withCredentials: false,\r\n  timeout: 30000,\r\n  //请求数据转换\r\n  transformRequest: [(data) => {\r\n    return JSON.stringify(data)\r\n  }],\r\n  //相应数据转换\r\n  transformResponse: [(data) => {\r\n    if (typeof data === 'string' && data.startsWith('{')) {\r\n      data = JSON.parse(data)\r\n    }\r\n    return data\r\n  }]\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use((config) => {\r\n  // 让每个请求携带自定义 token\r\n  // config.headers['Authorization'] = 'token'\r\n  return config\r\n}, (error) => {\r\n  // 错误抛到业务代码\r\n  error.data = {}\r\n  error.data.msg = '服务器异常，请联系管理员！'\r\n  return Promise.resolve(error)\r\n})\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use((response) => {\r\n  const status = response.status\r\n  let msg = ''\r\n  if (status < 200 || status >= 300) {\r\n    // 处理http错误，抛到业务代码\r\n    msg = showStatus(status)\r\n    if (typeof response.data === 'string') {\r\n      response.data = {\r\n        msg\r\n      }\r\n    } else {\r\n      response.data.msg = msg\r\n    }\r\n    //拦截异常（通知）\r\n    Notification({\r\n      title: '提示',\r\n      message: msg,\r\n      type: 'error'\r\n    })\r\n  }\r\n  return response\r\n}, (error) => {\r\n  // 错误抛到业务代码\r\n  error.data = {}\r\n  error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！'\r\n  return Promise.resolve(error)\r\n})\r\n\r\nconst showStatus = (status) => {\r\n  let message = ''\r\n  switch (status) {\r\n    case 400:\r\n      message = '请求错误(400)'\r\n      break\r\n    case 401:\r\n      message = '未授权，请重新登录(401)'\r\n      break\r\n    case 403:\r\n      message = '拒绝访问(403)'\r\n      break\r\n    case 404:\r\n      message = '请求出错(404)'\r\n      break\r\n    case 408:\r\n      message = '请求超时(408)'\r\n      break\r\n    case 500:\r\n      message = '服务器错误(500)'\r\n      break\r\n    case 501:\r\n      message = '服务未实现(501)'\r\n      break\r\n    case 502:\r\n      message = '网络错误(502)'\r\n      break\r\n    case 503:\r\n      message = '服务不可用(503)'\r\n      break\r\n    case 504:\r\n      message = '网络超时(504)'\r\n      break\r\n    case 505:\r\n      message = 'HTTP版本不受支持(505)'\r\n      break\r\n    default:\r\n      message = `连接出错(${status})!`\r\n  }\r\n  return `${message}，请检查网络或联系管理员！`\r\n}\r\n\r\nexport {\r\n  service as axios\r\n}"]},"metadata":{},"sourceType":"module"}